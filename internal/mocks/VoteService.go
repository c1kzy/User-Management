// Code generated by MockGen. DO NOT EDIT.
// Source: restapi/internal/domain (interfaces: VoteService)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"
	domain "restapi/internal/domain"

	gomock "github.com/golang/mock/gomock"
)

// VoteService is a mock of VoteService interface.
type VoteService struct {
	ctrl     *gomock.Controller
	recorder *VoteServiceMockRecorder
}

// VoteServiceMockRecorder is the mock recorder for VoteService.
type VoteServiceMockRecorder struct {
	mock *VoteService
}

// NewVoteService creates a new mock instance.
func NewVoteService(ctrl *gomock.Controller) *VoteService {
	mock := &VoteService{ctrl: ctrl}
	mock.recorder = &VoteServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *VoteService) EXPECT() *VoteServiceMockRecorder {
	return m.recorder
}

// UpdatePostVotes mocks base method.
func (m *VoteService) UpdatePostVotes(arg0 domain.VoteSumUpdate) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePostVotes", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdatePostVotes indicates an expected call of UpdatePostVotes.
func (mr *VoteServiceMockRecorder) UpdatePostVotes(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePostVotes", reflect.TypeOf((*VoteService)(nil).UpdatePostVotes), arg0)
}
