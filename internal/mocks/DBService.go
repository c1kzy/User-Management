// Code generated by MockGen. DO NOT EDIT.
// Source: restapi/internal/pkg/database (interfaces: DBService)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// DBService is a mock of DBService interface.
type DBService struct {
	ctrl     *gomock.Controller
	recorder *DBServiceMockRecorder
}

// DBServiceMockRecorder is the mock recorder for DBService.
type DBServiceMockRecorder struct {
	mock *DBService
}

// NewDBService creates a new mock instance.
func NewDBService(ctrl *gomock.Controller) *DBService {
	mock := &DBService{ctrl: ctrl}
	mock.recorder = &DBServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *DBService) EXPECT() *DBServiceMockRecorder {
	return m.recorder
}

// Exec mocks base method.
func (m *DBService) Exec(arg0 string, arg1 ...interface{}) (interface{}, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Exec", varargs...)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Exec indicates an expected call of Exec.
func (mr *DBServiceMockRecorder) Exec(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exec", reflect.TypeOf((*DBService)(nil).Exec), varargs...)
}

// GetAllPosts mocks base method.
func (m *DBService) GetAllPosts(arg0 string, arg1 ...interface{}) ([]interface{}, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAllPosts", varargs...)
	ret0, _ := ret[0].([]interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllPosts indicates an expected call of GetAllPosts.
func (mr *DBServiceMockRecorder) GetAllPosts(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllPosts", reflect.TypeOf((*DBService)(nil).GetAllPosts), varargs...)
}

// GetPostFromDB mocks base method.
func (m *DBService) GetPostFromDB(arg0 string, arg1 ...interface{}) (interface{}, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetPostFromDB", varargs...)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPostFromDB indicates an expected call of GetPostFromDB.
func (mr *DBServiceMockRecorder) GetPostFromDB(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPostFromDB", reflect.TypeOf((*DBService)(nil).GetPostFromDB), varargs...)
}

// GetUserFromDB mocks base method.
func (m *DBService) GetUserFromDB(arg0 string, arg1 ...interface{}) (interface{}, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetUserFromDB", varargs...)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserFromDB indicates an expected call of GetUserFromDB.
func (mr *DBServiceMockRecorder) GetUserFromDB(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserFromDB", reflect.TypeOf((*DBService)(nil).GetUserFromDB), varargs...)
}
