// Code generated by MockGen. DO NOT EDIT.
// Source: restapi/internal/infrastructure/inputports/grpc/handler (interfaces: ImplementedUserService)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"
	user "restapi/internal/infrastructure/inputports/grpc/proto/user"

	gomock "github.com/golang/mock/gomock"
)

// ImplementedUserService is a mock of ImplementedUserService interface.
type ImplementedUserService struct {
	ctrl     *gomock.Controller
	recorder *ImplementedUserServiceMockRecorder
}

// ImplementedUserServiceMockRecorder is the mock recorder for ImplementedUserService.
type ImplementedUserServiceMockRecorder struct {
	mock *ImplementedUserService
}

// NewImplementedUserService creates a new mock instance.
func NewImplementedUserService(ctrl *gomock.Controller) *ImplementedUserService {
	mock := &ImplementedUserService{ctrl: ctrl}
	mock.recorder = &ImplementedUserServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *ImplementedUserService) EXPECT() *ImplementedUserServiceMockRecorder {
	return m.recorder
}

// DeleteUser mocks base method.
func (m *ImplementedUserService) DeleteUser(arg0 context.Context, arg1 *user.DeleteUserRequest) (*user.UserResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUser", arg0, arg1)
	ret0, _ := ret[0].(*user.UserResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteUser indicates an expected call of DeleteUser.
func (mr *ImplementedUserServiceMockRecorder) DeleteUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUser", reflect.TypeOf((*ImplementedUserService)(nil).DeleteUser), arg0, arg1)
}

// UpdateUser mocks base method.
func (m *ImplementedUserService) UpdateUser(arg0 context.Context, arg1 *user.UpdateUserRequest) (*user.UserResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUser", arg0, arg1)
	ret0, _ := ret[0].(*user.UserResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUser indicates an expected call of UpdateUser.
func (mr *ImplementedUserServiceMockRecorder) UpdateUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*ImplementedUserService)(nil).UpdateUser), arg0, arg1)
}
